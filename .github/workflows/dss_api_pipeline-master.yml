name: "CI pipeline for testing, packaging, deploying Dataiku API services" 

on: [push, pull_request]

env:
  DSS_PROJECT: DKU_CHURN
  DESIGN_URL: https://dss-b51b6a96-f56c1b41-dku.us-east-1.app.dataiku.io
  DESIGN_API_KEY: ${{ secrets.DESIGNAPIKEY }}
  API_SERVICE_ID: api-service-churn
  API_ENDPOINT_ID: churn-model
  API_INFRA_ID: api_space-f56c1b41-dku_node-b51b6a96
  # API_KEY: ${{ secrets.API_KEY }}

jobs:
  DSS_API_SERVICE:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python 3.12.2
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
    - name: Set API package ID
      id: apipackage
      run: |
        echo "::set-output name=api_package_id::${API_SERVICE_ID}_v$(date +%Y-%m-%d_%H-%M-%S)"
    - name: Print environment
      run: printenv

    - name: VALIDATION
      run: |
        python -m pytest 1_project_validation/run_test.py -o junit_family=xunit1 --host='${{ env.DESIGN_URL }}' --api='${{ env.DESIGN_API_KEY }}' --project='${{ env.DSS_PROJECT }}' --junitxml=reports/PROJECT_VALIDATION.xml
      continue-on-error: true
    
    - name: PACKAGE AND PUBLISH
      run: |
        python 1_package_and_publish/run_packaging.py '${{ env.DESIGN_URL }}' '${{ env.DESIGN_API_KEY }}' '${{ env.DSS_PROJECT }}' '${{ env.API_SERVICE_ID }}' '${{ steps.apipackage.outputs.api_package_id }}' '${{ env.API_INFRA_ID }}'
    # - name: Upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: apipackage
    #     path: '${{ steps.apipackage.outputs.api_package_id }}.zip'

    # - name: DOWNLOAD ARTIFACT
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: apipackage
    # - name: Upload in preprod
    #   run: |
    #     python 3_preprod_test/import_bundle.py '${{ env.DESIGN_URL }}' '${{ env.DESIGN_API_KEY }}' '${{ env.DSS_PROJECT }}' '${{ env.API_SERVICE_ID }}' "${{ steps.apipackage.outputs.api_package_id }}" '${{ env.API_INFRA_ID }}'
    
    - name: DEV DEPLOY-TESTS
      run: |
        python 2_deploy_dev/run_deploy_dev.py '${{ env.DESIGN_URL }}' '${{ env.DESIGN_API_KEY }}' '${{ env.DSS_PROJECT }}' '${{ env.API_SERVICE_ID }}' "${{ steps.apipackage.outputs.api_package_id }}" "${API_INFRA_ID}"
        pytest -s 2_deploy_dev/test_dev.py -o junit_family=xunit1 --host='${{ env.DESIGN_URL }}' --api='${{ env.DESIGN_API_KEY }}' --api_service_id='${{ env.API_SERVICE_ID }}' --api_endpoint_id='${{ env.API_ENDPOINT_ID }}' --api_dev_infra_id='${{ env.API_INFRA_ID }}' --junitxml=reports/DEV_TEST.xml
        continue-on-error: true


  #   - name: Download artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: apipackage
  #   - name: DEPLOY TO PROD
  #     run: |
  #       python 3_deploy_prod/run_deploy_prod.py '${{ env.DESIGN_URL }}' '${{ env.DESIGN_API_KEY }}' '${{ env.DSS_PROJECT }}' '${{ env.API_SERVICE_ID }}' '${{ needs.PREPARE.outputs.api_package_id }}' '${{ env.API_INFRA_ID }}'

    - name: Test results
      uses: actions/upload-artifact@v2
      with:
        name: Test results
        path: reports/**/*.xml      